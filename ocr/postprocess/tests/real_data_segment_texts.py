import pickle
from unittest import TestCase

from ocr.postprocess import segment_texts

EXPECTED = [
    ['パーソンは\nカバルドンを くりだした', 'パーソンは\nカバルドンを くりだした!', 'パーソンは\nカバルドンを くりだした!', 'パーソンは\nカバルドンを くりだした!', 'パーソンは\nカバルドンを くりだした!', 'パーソンは\nカバルドンを くりだした!', 'パーソンは\nカバルドンを くりだした!', 'ゆけっ! ウオノラゴン!', 'ゆけっ! ウオノラゴン!', 'ゆけっ! ウオノラゴン!', 'ゆけっ! ウオノラゴン!', 'ゆけっ! ウオノラゴン!', '砂あらしが 吹き始めた!', '砂あらしが 吹き始めた!', '通信待機中…', 'ウオノラゴンの\nエラがみ!', 'ウオノラゴンの\nエラがみ!', 'ウオノラゴンの\nエラがみ!', '効果は バツグンだ!', 'ウオノラゴンは\nゴツゴツメットで ダメージを', 'ウオノラゴンは\nゴツゴツメットで ダメージを受けた!', '相手の カバルドンは たおれた!', '相手の カバルドンは たおれた!', '砂あらしが\nウォノラゴン', '砂あらしが\nウオノラゴンを 襲う!', '通信待機中 ...', '通信待機中 ...', '通信待機中…', '通信待機中…', '通信待機中…', '通信待機中 ...', '通信待機中…', '通信待機中 ...', '通信待機中 ...', '通信待機中 ...', 'パーソンは\nカイリューを くり', 'パーソンは\nカイリューを くりだした!', '通信待機中…', '通信待機中…', '通信待機中 ··', 'ウオノラゴンの\nエラがみ!', 'ウオノラゴンの\nエラがみ!', 'ウオノラゴンの\nエラがみ!', '実は 今ひとつのようだ ·····', '効果は 今ひとつのようだ ……', '相手の カイリューの\nりゅうのまい!', '相手の カイリューの\nりゆうのまい!', '相手の カイリューの\nりゆうのまい!', '相手の カイリューの\n攻撃が 上がった', '相手の カイリューの\n攻撃が 上がった!', '相手の カイリューの\n素早さが 上がっ', '相手の カイリューの\n素早さが 上がった!', '砂あらしが\n相手の カイリューを', '砂あらしが\n相手の カイリューを 襲う!', '砂あらしが\nウオノラゴンを 襲う!', '通信待機中…', '通信待機中…', '通信待機中 …..', '通信待機中…', '通信待機中 ……', '通信待機中…', '通信待機中…', '通信待機中…', '通信待機中…', '相手の カイリューの\nダイジェット!', '相手の カイリューの\nダイジェット!', '相手の カイリューの\n素早さが 上がった!', 'ウオノラゴンは たおれた!'],
    ['相手の カイリューは\n命が 少し削られた!', '砂あらしが\n相手の カイリュー', '砂あらしが\n相手の カイリューを', '通信待機中…', '通信待機中 ...', '通信待機中 ..', '通信待機中 ··', '任せた! トゲキッス!', '通信待機中…', '相手の カイリューの\nダイウォール!', '相手の カイリューの\nダイウォール!', '相手の カイリューの\nダイウォール!', 'トゲキッスの\nダイフェアリー!', 'トゲキッスの\nダイフェアリー', 'トゲキッスの\nダイフェアリー!', '相手の カイリューは\n攻撃から 身を守った!', '砂あらしが\n相手の カイリューを 襲う!', '砂あらしが\nトゲキッスを 襲う!', '通信待機中…', '通信待機中…', '通信待機中 ……', '通信待機中…', '相手の カイリューの\nダイジェット!', '相手の カイリューの\nダイジェット!', '相手の カイリューの\n素早さが 上がった!', '相手の カイリューの\n素早さが 上がった!', '相手の カイリューは\n命が', '相手の カイリューは\n命が 少し削られた!', 'トゲキッスの\nダイフェアリー!', 'トゲキッスの\nダイフェアリー!', 'トゲキッスの\nダイフェアリー', '効果は バツグンだ!', '足下に 霧が立ち込めた!', '相手の カイリューは たおれた!', '砂あらしが おさまった!', '通信待機中…', '通信待機中…', '通信待機中…', '通信待機中 ...', '通信待機中 ...', '通信待機中…', '通信待機中…', '通信待機中…', '通信待機中…', 'パーソンは\nミミッキュを くりだした!', '通信待機中…', '通信待機中 …...', '通信待機中…', '通信待機中…', '相手の ミミッキュは\nつるぎのまいを つかった!', '相手の ミミッキュは\nつるぎのまいを つかった!', '相手の ミミッキュは\nつるぎのまいを つかった!', '相手の ミミッキュの\n攻撃が ぐーんと上がった!', '相手の ミミッキュの\n攻撃が ぐーんと上がった!', 'トゲキッスの\nダイジェット!', 'トゲキッスの\nダイジェット!', 'トゲキッスの\nダイジェット!', 'トゲキッスの\n素早さが 上がった!', 'ばけのかわが みがわりに なった!', '相手の ミミッキュの\nばけのかわが はがれた!', '通信待機中 …...', '通信待機中 …..', '通信待機中…', '相手の ミミッキュの\nかげうち!', '相手の ミミッキュの\nかげうち!', '相手の ミミッキュの\nかげうち!', 'トゲキッスの\nエアスラッシュ!', 'トゲキッスの\nエアスラッシュ!'],
    ['通信待機中 ··', '通信待機中…', '通信待機中…', '通信待機中…', '通信待機中…', '相手の ミミッキュの\nかげうち!', '相手の ミミッキュの\nかげうち!', '相手の ミミッキュの\nかげうち!', 'トゲキッスは たおれた!', 'トゲキッスは たおれた!', '通信待機中…', '通信待機中…', '通信待機中 ...', 'がんばれ! ウインディ!', '通信待機中…', '通信待機中 ...', '通信待機中…', '相手の ミミッキュの\nドレインパンチ!', '相手の ミミッキュの\nドレインパンチ!', '相手の ミミッキュの\nドレインパンチ!', 'ウインディから\n体力を 吸い取った!', 'ウインディの\nフレアドライブ!', 'ウインディの\nフレアドライブ!', 'ウインディの\nフレアドライブ!', '相手の ミミッキュは たおれた!', 'ウインディは\n反動による ダメージを 受けた!', 'ウインディは\n命が 少し削られた!', 'パーソンとの\n勝負に 勝った!']
]

class SegmentTextsRealDataTest(TestCase):

    def test(self):
        with open("data/ocr_result.pickle", "rb") as f:
            data = pickle.load(f)

        for i, item in enumerate(data):
            result = segment_texts(item, 1070, 98, 48)
            self.assertSequenceEqual(EXPECTED[i], result)